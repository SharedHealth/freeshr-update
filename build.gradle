apply plugin: 'java'
apply plugin: 'rpm'
apply plugin: 'idea'

def mainClassName = "org.sharedhealth.freeshrUpdate.launch.Main"

jar {
    baseName = 'freeshr-update'
    manifest {
        attributes('Main-Class': mainClassName)
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    flatDir {
        dirs 'lib'
    }
}


configurations.all {
    exclude group: 'org.jboss.netty', module: 'netty'
    exclude group: 'commons-logging', module: "commons-logging"
    exclude group: 'ch.qos.logback', module: "logback-classic"
}

ext.libraries = [
        spring_framework     : "org.springframework:spring-core:4.1.1.RELEASE",
        spring_boot_logging  : "org.springframework.boot:spring-boot-starter-log4j:1.1.1.RELEASE",
        quartz_scheduler     : "org.quartz-scheduler:quartz:2.2.1",
        atomfeed_client      : "org.ict4h:atomfeed-client:1.2",
        atomfeed_commons     : "org.ict4h:atomfeed-commons:1.2",
        rome                 : "rome:rome:1.0",
        time_uuid            : "com.eaio.uuid:uuid:3.2",
        apache_httpclient    : "org.apache.httpcomponents:httpclient:4.3.5",
        apache_commons_codec : "commons-codec:commons-codec:1.9",
        apache_commons_dbcp  : "commons-dbcp:commons-dbcp:1.4",
        apache_commons_io    : "org.apache.commons:commons-io:1.3.2",
        spring_ctx_support   : "org.springframework:spring-context-support:4.1.1.RELEASE",
        joda                 : "joda-time:joda-time:2.5",
        rxjava               : "io.reactivex:rxjava:1.0.12",
        spring_data_cassandra: "org.springframework.data:spring-data-cassandra:1.2.+",
        jackson              : "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.4.0",
        liquibase            : "org.liquibase:liquibase-core:3.1.1",
        mysql_connector      : "mysql:mysql-connector-java:5.1.33",
        spring_jdbc          : "org.springframework:spring-jdbc:4.1.1.RELEASE"

]


ext.testLibraries = [
        junit         : "junit:junit:4.10",
        mockito       : "org.mockito:mockito-all:1.8.4",
        wiremock      : "com.github.tomakehurst:wiremock:1.51",
        spring_test   : "org.springframework:spring-test:4.1.1.RELEASE",
        cassandra_unit: "org.cassandraunit:cassandra-unit-spring:2.0.2.2",
        h2_database   : "com.h2database:h2:1.4.182",
        mutagen       : "com.toddfast.mutagen:mutagen:0.3.0",
        mutagen_cassandra    : "com.toddfast.mutagen:mutagen-cassandra:0.4.2-SNAPSHOT"

]
dependencies {
    compile libraries.values()
    testCompile testLibraries.values()
}

task checkStyle(type: Checkstyle) {
    configFile file("${project.projectDir}/org.sharedhealth.freeshrUpdate.config/checkstyle/checkstyle.xml")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

jar.dependsOn 'checkStyle'

def exportEnvironmentVariablesToXML(defaults) {
    defaults.remove(defaults.envs)
    Properties environmentVariables = new Properties();
    environmentVariables.load(new FileInputStream(new File('env/local.properties')))
    defaults.append new NodeBuilder().envs() {
        environmentVariables.each { prop, value ->
            env(name: prop, value: value)
        }
    }
}


def localEnv = new Properties();
localEnv.load(new FileInputStream(new File('env/local.properties')))

//build artifact
private Properties loadConfig() {
    Properties properties = new Properties()
    properties.load(new FileInputStream(new File('env/local.properties')));
    properties
}

task assembly(dependsOn: 'build') << {
    new File("${buildDir}/etc/").mkdir();
}


task exportProperties(dependsOn: 'assembly') << {
    PrintStream output = new PrintStream(new FileOutputStream(file("${buildDir}/etc/freeshr-update")));
    Properties properties = loadConfig()
    properties.each { prop, val ->
        output.println("export " + prop + "=" + val)
    }
}

task dist(dependsOn: 'exportProperties', type: Rpm) {
    packageName = 'freeshr-update'
    version = '0.2'
    release = project.hasProperty('release') ? project.release : '1'
    arch = NOARCH
    os = LINUX

    into '/opt/freeshr-update'

    postInstall = file('scripts/utils/postInstall.sh')
    preUninstall = file('scripts/utils/preUninstall.sh')
    postUninstall = file('scripts/utils/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'freeshr-update'
        exclude 'start.sh'
        into 'var'
    }
}


test {
    environment localEnv
}

task runUpdate(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(new File('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DSHR_UPDATE_LOG_LEVEL=DEBUG']
    classpath = sourceSets.main.runtimeClasspath
    environment properties
}

task debugUpdate(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(new File('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DSHR_UPDATE_LOG_LEVEL=DEBUG']
    classpath = sourceSets.main.runtimeClasspath
    environment properties
    debug = true
}

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.remove(junitDefaults.envs)
            junitDefaults.append new NodeBuilder().envs() {
                env(name: 'PATH_TO_CONFIG', value: "\$PROJECT_DIR\$/env/local.properties")
            }
            /*Configuring application runtime parameters*/
            exportEnvironmentVariablesToXML(runManager.configuration.find {
                it.@default == 'true' && it.@type == 'Application'
            });
        }
    }
    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath(
                'com.netflix.nebula:gradle-ospackage-plugin:2.+'
        )
    }
}
